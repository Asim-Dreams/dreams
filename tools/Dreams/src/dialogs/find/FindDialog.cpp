/*
 * Copyright (C) 2006 Intel Corporation
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * 
 */

/****************************************************************************
** Form implementation generated from reading ui file 'FindDialog.ui'
**
** Created: Tue May 24 14:55:04 2005
**      by: The User Interface Compiler ($Id: FindDialog.cpp 341 2006-10-31 12:19:54Z cjbeckma $)
**
** WARNING! All changes made in this file will be lost!
****************************************************************************/

#include "FindDialog.h"

#include <qvariant.h>
#include <qpushbutton.h>
#include <qlabel.h>
#include <qlineedit.h>
#include <qtoolbutton.h>
#include <qspinbox.h>
#include <qcombobox.h>
#include <qcheckbox.h>
#include <qlayout.h>
#include <qtooltip.h>
#include <qwhatsthis.h>
#include <qimage.h>
#include <qpixmap.h>

static const unsigned char image0_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x01,
    0x66, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x9d, 0x92, 0xbd, 0x4a, 0x03,
    0x41, 0x14, 0x85, 0xbf, 0x4d, 0xd4, 0xc0, 0x6a, 0x65, 0xb3, 0x1a, 0xac,
    0x2c, 0x02, 0x36, 0x36, 0xd7, 0xc6, 0x4a, 0x11, 0x2c, 0xac, 0x6c, 0xac,
    0xc4, 0x4e, 0xd8, 0x54, 0x42, 0x24, 0x2f, 0x90, 0x3c, 0x80, 0xa0, 0x28,
    0xe8, 0x86, 0x08, 0x82, 0xbe, 0x80, 0xc4, 0x5a, 0x12, 0x1b, 0x0b, 0x77,
    0xca, 0x60, 0xb4, 0xb1, 0x11, 0x45, 0x8b, 0x88, 0x24, 0x6c, 0x91, 0x66,
    0x2c, 0xb2, 0x4e, 0xa2, 0xc9, 0x86, 0xe8, 0x69, 0xe6, 0x8f, 0xf3, 0xcd,
    0xb9, 0x77, 0xc6, 0xa2, 0x4b, 0xd9, 0xc3, 0xb2, 0x6e, 0x8c, 0x4d, 0x00,
    0x20, 0xc0, 0x63, 0xab, 0xc9, 0xde, 0xce, 0xb2, 0xc5, 0x00, 0x99, 0x43,
    0xd7, 0xf3, 0x35, 0x22, 0xc6, 0xac, 0xbe, 0x21, 0xb7, 0x95, 0x81, 0x10,
    0xab, 0xdb, 0x2c, 0x02, 0x0e, 0xf0, 0x46, 0x48, 0x08, 0x69, 0x8f, 0x47,
    0xd1, 0x90, 0x91, 0xcd, 0xdd, 0x83, 0xb6, 0x39, 0xbc, 0xd1, 0x48, 0xda,
    0x20, 0x07, 0x60, 0x71, 0x29, 0xb2, 0x84, 0x58, 0x4b, 0x27, 0x8c, 0xa1,
    0x5b, 0x33, 0xa1, 0x79, 0x06, 0x70, 0x04, 0x32, 0xb9, 0x7d, 0xdd, 0x17,
    0x30, 0x39, 0xb7, 0xd0, 0xf6, 0xaa, 0x76, 0xea, 0xe7, 0xd0, 0xc4, 0xaf,
    0xf1, 0xfd, 0xb3, 0x7f, 0x1b, 0x62, 0xf5, 0x7b, 0x3f, 0x32, 0x1e, 0xc0,
    0x5c, 0x10, 0x00, 0x10, 0xff, 0xa8, 0x45, 0x00, 0x9e, 0xee, 0x4c, 0xbf,
    0x3a, 0x93, 0x8e, 0xd9, 0xb6, 0x6d, 0x9a, 0x95, 0x0a, 0xe7, 0x67, 0xc7,
    0x7d, 0x23, 0xc4, 0xae, 0x2f, 0x4f, 0xad, 0xfa, 0x85, 0x47, 0x6f, 0x17,
    0xc1, 0xb6, 0x6d, 0x82, 0x20, 0xa0, 0x54, 0x2a, 0x45, 0x26, 0x34, 0xd4,
    0x8d, 0xcc, 0x89, 0x5e, 0xdd, 0x4a, 0xe3, 0x48, 0xa7, 0xf6, 0xf1, 0x5a,
    0x8d, 0x62, 0xb1, 0x48, 0xa3, 0x91, 0x62, 0x7a, 0xfa, 0x85, 0x7c, 0x3e,
    0xdf, 0x93, 0xe2, 0xc7, 0xc6, 0xca, 0xfa, 0xb6, 0x9e, 0x9a, 0x9d, 0x37,
    0xeb, 0x87, 0x9b, 0x2a, 0x4a, 0x15, 0xac, 0x6c, 0x36, 0xab, 0x53, 0x8d,
    0x32, 0x82, 0x42, 0x01, 0xe9, 0x02, 0x03, 0x7f, 0x67, 0x5f, 0xf9, 0x9e,
    0x68, 0xed, 0xbb, 0xda, 0xf7, 0xd0, 0x9e, 0x60, 0x9e, 0x34, 0x36, 0x2c,
    0x40, 0x15, 0x14, 0x4a, 0x81, 0x88, 0x8b, 0xb8, 0xd0, 0x0d, 0x19, 0x5a,
    0xae, 0xa0, 0x7d, 0xcf, 0x35, 0x49, 0x5c, 0x41, 0xc7, 0xff, 0x02, 0x50,
    0xaf, 0xe4, 0x79, 0x55, 0xb9, 0x64, 0x52, 0x10, 0x84, 0x2b, 0xc5, 0x3f,
    0x9a, 0x11, 0x26, 0x49, 0x8c, 0xae, 0x51, 0x75, 0x92, 0x7c, 0x01, 0x11,
    0x1c, 0x83, 0x90, 0xe1, 0x08, 0x94, 0x9b, 0x00, 0x00, 0x00, 0x00, 0x49,
    0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image1_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x01,
    0xc1, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x8d, 0x92, 0x4f, 0x6b, 0x13,
    0x41, 0x18, 0xc6, 0x7f, 0x1b, 0x17, 0x46, 0x16, 0x12, 0x77, 0x11, 0xb1,
    0x61, 0xa1, 0x08, 0x1e, 0xa4, 0xda, 0x83, 0xf0, 0x06, 0x0f, 0x3d, 0x7b,
    0xec, 0xe7, 0x48, 0x4e, 0x82, 0x1f, 0x41, 0xfc, 0x04, 0x6a, 0xbc, 0x64,
    0x8f, 0x52, 0x10, 0xf4, 0xda, 0x93, 0xe2, 0x41, 0xf0, 0x20, 0xb2, 0x03,
    0x12, 0x82, 0x7b, 0x32, 0xad, 0x41, 0x12, 0x13, 0xe9, 0x52, 0x42, 0xd9,
    0x38, 0x6d, 0xca, 0x7a, 0x30, 0xbb, 0x6e, 0xb2, 0xb1, 0xf8, 0xc0, 0x30,
    0xcc, 0x3b, 0xf3, 0xfc, 0xe6, 0x99, 0x3f, 0x16, 0x05, 0x75, 0xc2, 0x34,
    0x05, 0x18, 0xf5, 0xa0, 0xbe, 0x0d, 0xa0, 0x69, 0x35, 0x1a, 0x16, 0x17,
    0xc8, 0x02, 0x08, 0xc3, 0x30, 0xdd, 0xef, 0x09, 0x90, 0x19, 0x0b, 0xd2,
    0x9a, 0x56, 0xeb, 0xdf, 0x10, 0x2b, 0xdb, 0x59, 0x00, 0xa4, 0x68, 0x04,
    0xfd, 0x1f, 0x10, 0xbb, 0xd3, 0x09, 0x53, 0x16, 0xe6, 0xad, 0x24, 0x01,
    0x20, 0x72, 0x1c, 0x90, 0xbf, 0x3c, 0xbd, 0xce, 0xb9, 0x50, 0x65, 0xb5,
    0xe0, 0x38, 0xce, 0xd2, 0x78, 0x2b, 0x49, 0x10, 0x11, 0xda, 0xed, 0x76,
    0xba, 0x16, 0xa0, 0x0b, 0xc9, 0x23, 0xc7, 0x41, 0x2f, 0x4c, 0xee, 0xc1,
    0x10, 0xd5, 0xeb, 0xd1, 0xef, 0xf7, 0x71, 0x0f, 0x86, 0x7c, 0x3d, 0x3a,
    0x27, 0x08, 0x82, 0x12, 0xc4, 0xae, 0x9e, 0x9e, 0xac, 0x8d, 0x56, 0xbf,
    0xee, 0x02, 0x2e, 0xc6, 0x18, 0xe2, 0xe3, 0x19, 0x37, 0xaf, 0x5e, 0xe2,
    0xcb, 0x30, 0x29, 0x27, 0x38, 0x3f, 0xfa, 0x7c, 0xe1, 0x19, 0x95, 0x52,
    0x4c, 0x7e, 0x7c, 0xa3, 0x5a, 0xad, 0xae, 0x9d, 0xaf, 0x3c, 0x79, 0xf4,
    0xd0, 0x42, 0x2f, 0x23, 0xa2, 0xc2, 0x3d, 0x18, 0x63, 0x78, 0xf5, 0xe6,
    0x13, 0xc6, 0x6c, 0xb3, 0x71, 0xf9, 0x57, 0x19, 0x00, 0xb0, 0xb9, 0xf9,
    0x93, 0x97, 0xcf, 0xdf, 0xf3, 0x7d, 0x05, 0x32, 0x18, 0x0c, 0x78, 0xfc,
    0xec, 0x05, 0x00, 0x67, 0x67, 0x1f, 0xb9, 0xdf, 0x7f, 0x5d, 0x02, 0x58,
    0x00, 0x71, 0x1c, 0xa7, 0xf1, 0xf1, 0x8c, 0x77, 0x6f, 0xf7, 0x89, 0x46,
    0xb3, 0x7c, 0xf2, 0xee, 0x0d, 0x17, 0xdf, 0xf7, 0x99, 0x4c, 0x46, 0xdc,
    0x3a, 0x79, 0x8a, 0xa0, 0xd1, 0x1a, 0x1a, 0x01, 0x56, 0x09, 0xe0, 0x79,
    0x1e, 0x49, 0x92, 0x60, 0x8c, 0xc9, 0xa3, 0x2b, 0xa5, 0x50, 0x4a, 0x11,
    0xed, 0xed, 0x01, 0x01, 0x22, 0x82, 0xd6, 0x01, 0x14, 0x20, 0x95, 0x6c,
    0x71, 0x26, 0xcf, 0xf3, 0x50, 0x4a, 0x51, 0xab, 0xd5, 0xf2, 0x5a, 0x7d,
    0x77, 0x97, 0xec, 0xb1, 0x45, 0x9a, 0x20, 0xd0, 0x69, 0x92, 0xe6, 0x00,
    0xa5, 0x54, 0xbe, 0x38, 0x59, 0xfc, 0xc6, 0x0c, 0x3a, 0x9d, 0x4e, 0x71,
    0x5d, 0x17, 0xb5, 0xf3, 0x80, 0x20, 0xf8, 0x73, 0x04, 0x91, 0x26, 0x22,
    0xd0, 0x11, 0xd2, 0xa5, 0x9f, 0xe8, 0x38, 0x4e, 0xde, 0x56, 0x93, 0xf8,
    0xbe, 0xcf, 0x61, 0xf5, 0x0e, 0x8d, 0x56, 0x60, 0xe9, 0x3c, 0x89, 0x60,
    0x03, 0x74, 0xbb, 0x5d, 0xc6, 0xe3, 0x31, 0xb6, 0x6d, 0x33, 0x9f, 0xcf,
    0x4b, 0x7d, 0x96, 0xe8, 0xca, 0xb5, 0xdb, 0x00, 0xe8, 0x56, 0x80, 0x16,
    0xe1, 0xc3, 0xe9, 0x3d, 0x7e, 0x03, 0x2c, 0xba, 0xbd, 0x2c, 0xac, 0xea,
    0x7c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42,
    0x60, 0x82
};

static const unsigned char image2_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x00,
    0xd0, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xad, 0x93, 0xc1, 0x09, 0xc2,
    0x40, 0x10, 0x45, 0x5f, 0xac, 0x21, 0xe0, 0xd1, 0x0e, 0x14, 0x9c, 0x2e,
    0xbc, 0x08, 0x16, 0xb1, 0x3d, 0x69, 0x11, 0x82, 0x17, 0xab, 0xd8, 0x09,
    0xc4, 0x3a, 0xec, 0xe1, 0x7b, 0x88, 0x9a, 0x8d, 0xbb, 0xab, 0x82, 0x7e,
    0x08, 0x24, 0xd9, 0x79, 0x2f, 0xc3, 0x30, 0x81, 0x7f, 0x45, 0x86, 0xfa,
    0x4d, 0xab, 0x4f, 0x75, 0xd1, 0x90, 0xc3, 0xb4, 0x4e, 0x86, 0xb4, 0x0f,
    0x52, 0x0c, 0x6f, 0x25, 0xd1, 0x90, 0x82, 0x49, 0x89, 0x64, 0x06, 0x70,
    0x99, 0xb7, 0x60, 0x00, 0xc6, 0x72, 0xbb, 0xa3, 0x24, 0x89, 0x86, 0xcc,
    0x6c, 0x78, 0xb0, 0xf1, 0x7d, 0xf3, 0xb8, 0xe9, 0x37, 0xad, 0x96, 0xdb,
    0xdd, 0xf3, 0xe0, 0x72, 0x3a, 0xb2, 0x3a, 0x5f, 0x9b, 0x0c, 0xc6, 0xe9,
    0x0e, 0x60, 0x77, 0xb6, 0x21, 0xc9, 0x54, 0xe2, 0xf8, 0xc1, 0x87, 0x0f,
    0x56, 0xe0, 0x4c, 0x30, 0x4a, 0x16, 0x8f, 0xfa, 0x24, 0x39, 0x5c, 0x14,
    0xe4, 0x2d, 0xd7, 0x61, 0xb8, 0x0f, 0xf1, 0x63, 0xbc, 0x7e, 0x94, 0x19,
    0x5f, 0x07, 0x96, 0xc2, 0x9d, 0xe7, 0x5d, 0x4c, 0x3a, 0x28, 0x4d, 0xbb,
    0x4b, 0x04, 0xeb, 0x41, 0x59, 0xde, 0x93, 0xe7, 0x92, 0x04, 0x93, 0xc2,
    0x74, 0xdb, 0x1c, 0xa4, 0xe4, 0xca, 0x24, 0xef, 0xe0, 0xaf, 0x24, 0xce,
    0xf0, 0x1f, 0xd4, 0xe0, 0x92, 0x24, 0xbe, 0xd6, 0x79, 0xa9, 0xb5, 0x8a,
    0x24, 0x83, 0x7f, 0xc9, 0x0d, 0x0c, 0xdc, 0x92, 0x77, 0x06, 0x2a, 0x2b,
    0x47, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60,
    0x82
};


/*
 *  Constructs a FindDialog as a child of 'parent', with the
 *  name 'name' and widget flags set to 'f'.
 *
 *  The dialog will by default be modeless, unless you set 'modal' to
 *  TRUE to construct a modal dialog.
 */
FindDialog::FindDialog( QWidget* parent, const char* name, bool modal, WFlags fl )
    : QDialog( parent, name, modal, fl )
{
    QImage img;
    img.loadFromData( image0_data, sizeof( image0_data ), "PNG" );
    image0 = img;
    img.loadFromData( image1_data, sizeof( image1_data ), "PNG" );
    image1 = img;
    img.loadFromData( image2_data, sizeof( image2_data ), "PNG" );
    image2 = img;
    if ( !name )
	setName( "FindDialog" );
    setFocusPolicy( QDialog::NoFocus );

    QWidget* privateLayoutWidget = new QWidget( this, "layout9" );
    privateLayoutWidget->setGeometry( QRect( 10, 10, 610, 230 ) );
    layout9 = new QVBoxLayout( privateLayoutWidget, 11, 6, "layout9"); 

    layout12 = new QHBoxLayout( 0, 0, 6, "layout12"); 

    TextLabel1 = new QLabel( privateLayoutWidget, "TextLabel1" );
    layout12->addWidget( TextLabel1 );

    LineEdit_TAGName = new QLineEdit( privateLayoutWidget, "LineEdit_TAGName" );
    LineEdit_TAGName->setFocusPolicy( QLineEdit::StrongFocus );
    layout12->addWidget( LineEdit_TAGName );

    ToolButton_Search = new QToolButton( privateLayoutWidget, "ToolButton_Search" );
    ToolButton_Search->setMinimumSize( QSize( 22, 22 ) );
    ToolButton_Search->setIconSet( QIconSet( image0 ) );
    layout12->addWidget( ToolButton_Search );
    layout9->addLayout( layout12 );

    layout13 = new QHBoxLayout( 0, 0, 6, "layout13"); 

    TextLabel1_2 = new QLabel( privateLayoutWidget, "TextLabel1_2" );
    layout13->addWidget( TextLabel1_2 );

    LineEdit_TAGValue = new QLineEdit( privateLayoutWidget, "LineEdit_TAGValue" );
    LineEdit_TAGValue->setFocusPolicy( QLineEdit::StrongFocus );
    layout13->addWidget( LineEdit_TAGValue );
    layout9->addLayout( layout13 );

    layout14 = new QHBoxLayout( 0, 0, 6, "layout14"); 

    TextLabel1_2_2 = new QLabel( privateLayoutWidget, "TextLabel1_2_2" );
    layout14->addWidget( TextLabel1_2_2 );

    SpinBox_Cycle = new QSpinBox( privateLayoutWidget, "SpinBox_Cycle" );
    SpinBox_Cycle->setMaxValue( 999999999 );
    layout14->addWidget( SpinBox_Cycle );
    layout9->addLayout( layout14 );

    layout8 = new QHBoxLayout( 0, 0, 6, "layout8"); 

    TextLabel1_2_2_2 = new QLabel( privateLayoutWidget, "TextLabel1_2_2_2" );
    layout8->addWidget( TextLabel1_2_2_2 );

    comboBox1 = new QComboBox( FALSE, privateLayoutWidget, "comboBox1" );
    layout8->addWidget( comboBox1 );
    layout9->addLayout( layout8 );

    textLabel1 = new QLabel( privateLayoutWidget, "textLabel1" );
    layout9->addWidget( textLabel1 );

    layout29 = new QHBoxLayout( 0, 0, 6, "layout29"); 

    CheckBox_CaseSensitive = new QCheckBox( privateLayoutWidget, "CheckBox_CaseSensitive" );
    CheckBox_CaseSensitive->setEnabled( FALSE );
    layout29->addWidget( CheckBox_CaseSensitive );
    spacer9 = new QSpacerItem( 40, 20, QSizePolicy::Expanding, QSizePolicy::Minimum );
    layout29->addItem( spacer9 );

    CheckBox_ExactMatch = new QCheckBox( privateLayoutWidget, "CheckBox_ExactMatch" );
    CheckBox_ExactMatch->setEnabled( FALSE );
    layout29->addWidget( CheckBox_ExactMatch );
    spacer9_2 = new QSpacerItem( 40, 20, QSizePolicy::Expanding, QSizePolicy::Minimum );
    layout29->addItem( spacer9_2 );

    CheckBox_Regular = new QCheckBox( privateLayoutWidget, "CheckBox_Regular" );
    CheckBox_Regular->setEnabled( FALSE );
    layout29->addWidget( CheckBox_Regular );
    layout9->addLayout( layout29 );

    layout7 = new QHBoxLayout( 0, 0, 6, "layout7"); 
    spacer7 = new QSpacerItem( 250, 20, QSizePolicy::Expanding, QSizePolicy::Minimum );
    layout7->addItem( spacer7 );

    FindButton = new QPushButton( privateLayoutWidget, "FindButton" );
    FindButton->setMinimumSize( QSize( 75, 0 ) );
    FindButton->setPixmap( image1 );
    FindButton->setDefault( FALSE );
    layout7->addWidget( FindButton );

    CancelButton = new QPushButton( privateLayoutWidget, "CancelButton" );
    CancelButton->setMinimumSize( QSize( 75, 0 ) );
    CancelButton->setPixmap( image2 );
    layout7->addWidget( CancelButton );
    layout9->addLayout( layout7 );
    languageChange();
    resize( QSize(634, 255).expandedTo(minimumSizeHint()) );
    clearWState( WState_Polished );

    // tab order
    setTabOrder( LineEdit_TAGName, LineEdit_TAGValue );
    setTabOrder( LineEdit_TAGValue, FindButton );
    setTabOrder( FindButton, CheckBox_CaseSensitive );
    setTabOrder( CheckBox_CaseSensitive, CheckBox_ExactMatch );
    setTabOrder( CheckBox_ExactMatch, CheckBox_Regular );
    setTabOrder( CheckBox_Regular, CancelButton );
}

/*
 *  Destroys the object and frees any allocated resources
 */
FindDialog::~FindDialog()
{
    // no need to delete child widgets, Qt does it all for us
}

/*
 *  Sets the strings of the subwidgets using the current
 *  language.
 */
void FindDialog::languageChange()
{
    setCaption( tr( "Find" ) );
    TextLabel1->setText( tr( "TAG Name:" ) );
    ToolButton_Search->setText( QString::null );
    TextLabel1_2->setText( tr( "TAG Value:" ) );
    TextLabel1_2_2->setText( tr( "Starting at cycle:" ) );
    TextLabel1_2_2_2->setText( tr( "Clock Domain:" ) );
    textLabel1->setText( tr( "Search Options:" ) );
    CheckBox_CaseSensitive->setText( tr( "Case Sensitive" ) );
    CheckBox_ExactMatch->setText( tr( "Exact Match" ) );
    CheckBox_Regular->setText( tr( "Regular Expression" ) );
    FindButton->setText( QString::null );
    FindButton->setAccel( QKeySequence( QString::null ) );
    CancelButton->setText( QString::null );
    CancelButton->setAccel( QKeySequence( QString::null ) );
}

